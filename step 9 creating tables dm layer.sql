call bl_cl.create_tables_dm_layer()
CREATE OR REPLACE PROCEDURE bl_cl.create_tables_dm_layer()

LANGUAGE plpgsql
AS
$$
DECLARE

    start_time TIMESTAMP;
    end_time TIMESTAMP;
    run_time INTERVAL;
	user_name  text;
	message text;
	schema_name text;
	table_name text;
BEGIN
   user_name := current_user;
	message := 'creating all tables dm layer completed';
	schema_name := 'bl_dm';
	table_name := 'all_tables';
    start_time := CURRENT_TIMESTAMP;

CREATE TABLE IF NOT EXISTS bl_dm.DIM_TIMES
(
    TIME_ID DATE NOT NULL,
    DAY_NAME CHARACTER VARYING(9),
    DAY_NUMBER_IN_WEEK SMALLINT,
    DAY_NUMBER_IN_MONTH SMALLINT,
    CALENDAR_WEEK_NUMBER SMALLINT,
    FISCAL_WEEK_NUMBER SMALLINT,
    WEEK_ENDING_DAY DATE,
    WEEK_ENDING_DAY_ID INTEGER,
    CALENDAR_MONTH_NUMBER SMALLINT,
    FISCAL_MONTH_NUMBER SMALLINT,
    CALENDAR_MONTH_DESC CHARACTER VARYING(8),
    CALENDAR_MONTH_ID INTEGER,
    FISCAL_MONTH_DESC CHARACTER VARYING(8),
    FISCAL_MONTH_ID INTEGER,
    DAYS_IN_CAL_MONTH INTEGER,
    DAYS_IN_FIS_MONTH INTEGER,
    END_OF_CAL_MONTH DATE,
    END_OF_FIS_MONTH DATE,
    CALENDAR_MONTH_NAME CHARACTER VARYING(9),
    FISCAL_MONTH_NAME CHARACTER VARYING(9),
    CALENDAR_QUARTER_DESC CHARACTER(7),
    CALENDAR_QUARTER_ID INTEGER,
    FISCAL_QUARTER_DESC CHARACTER(7),
    FISCAL_QUARTER_ID INTEGER,
    DAYS_IN_CAL_QUARTER INTEGER,
    DAYS_IN_FIS_QUARTER INTEGER,
    END_OF_CAL_QUARTER DATE,
    END_OF_FIS_QUARTER DATE,
    CALENDAR_QUARTER_NUMBER SMALLINT,
    FISCAL_QUARTER_NUMBER SMALLINT,
    CALENDAR_YEAR SMALLINT,
    CALENDAR_YEAR_ID INTEGER,
    FISCAL_YEAR SMALLINT,
    FISCAL_YEAR_ID INTEGER,
    DAYS_IN_CAL_YEAR INTEGER,
    DAYS_IN_FIS_YEAR INTEGER,
    END_OF_CAL_YEAR DATE,
    END_OF_FIS_YEAR DATE,
    CONSTRAINT TIMES_PK PRIMARY KEY (TIME_ID)
);



  CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_PAYMENT_METHODS_seq;
  CREATE TABLE IF NOT EXISTS bl_dm.DIM_PAYMENT_METHODS (
    PAYMENT_METHOD_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_PAYMENT_METHODS_seq'),
    PAYMENT_METHOD_SRC_ID BIGINT,
    PAYMENT_METHOD_NAME VARCHAR(255) NOT NULL,
    SOURCE_SYSTEM VARCHAR(255) NOT NULL,
    SOURCE_ENTITY VARCHAR(255) NOT NULL,
    INSERT_DT DATE NOT NULL,
    UPDATE_DT DATE NOT NULL
  );
CREATE INDEX idx_dim_payment_methods_src_id ON bl_dm.DIM_PAYMENT_METHODS (PAYMENT_METHOD_SRC_ID);
CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_SHIPPING_METHODS_seq;
 CREATE TABLE IF NOT EXISTS bl_dm.DIM_SHIPPING_METHODS (
    SHIPPING_METHOD_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_SHIPPING_METHODS_seq'),
    SHIPPING_METHOD_SRC_ID INTEGER,
    SHIPPING_METHOD_NAME VARCHAR(255),
    SOURCE_SYSTEM VARCHAR(255) NOT NULL,
    SOURCE_ENTITY VARCHAR(255) NOT NULL,
    INSERT_DT DATE NOT NULL,
    UPDATE_DT DATE NOT NULL
  );
CREATE INDEX idx_dim_shipping_methods_src_id ON bl_dm.DIM_SHIPPING_METHODS (SHIPPING_METHOD_SRC_ID);


CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_ONLINE_ADD_CHANNELS_seq;
 CREATE TABLE IF NOT EXISTS bl_dm.DIM_ONLINE_ADD_CHANNELS (
    ONLINE_ADD_CHANNEL_SURR_ID  BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_ONLINE_ADD_CHANNELS_seq'),
    ONLINE_ADD_CHANNEL_SRC_ID INTEGER,
    ONLINE_ADD_CHANNEL_NAME VARCHAR(255),
    SOURCE_SYSTEM VARCHAR(255) NOT NULL,
    SOURCE_ENTITY VARCHAR(255) NOT NULL,
    INSERT_DT DATE NOT NULL,
    UPDATE_DT DATE NOT NULL
  );
CREATE INDEX idx_dim_online_add_channels_src_id ON bl_dm.DIM_ONLINE_ADD_CHANNELS (ONLINE_ADD_CHANNEL_SRC_ID);

CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_WEBS_seq;
 CREATE TABLE IF NOT EXISTS bl_dm.DIM_WEBS (
    WEB_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_WEBS_seq'),
    WEB_SRC_ID INTEGER,
    WEB_NAME VARCHAR(255),
    SOURCE_SYSTEM VARCHAR(255) NOT NULL,
    SOURCE_ENTITY VARCHAR(255) NOT NULL,
    INSERT_DT DATE NOT NULL,
    UPDATE_DT DATE NOT NULL
  );
CREATE INDEX idx_dim_webs_src_id ON bl_dm.DIM_WEBS (WEB_SRC_ID);

CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_CUSTOMERS_seq;
 CREATE TABLE IF NOT EXISTS bl_dm.DIM_CUSTOMERS (
    CUSTOMER_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_CUSTOMERS_seq'),
    CUSTOMER_SRC_ID INTEGER,
    CUSTOMER_FIRST_NAME VARCHAR(255),
	CUSTOMER_LAST_NAME VARCHAR(255),
    USER_NAME VARCHAR(255),
    PHONE VARCHAR(255),
    EMAIL VARCHAR(255),	 
    SOURCE_SYSTEM VARCHAR(255) NOT NULL,
    SOURCE_ENTITY VARCHAR(255) NOT NULL,
    INSERT_DT DATE NOT NULL,
    UPDATE_DT DATE NOT NULL
  );

CREATE INDEX idx_dim_customers_src_id ON bl_dm.DIM_CUSTOMERS (CUSTOMER_SRC_ID);

CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_STORES_seq;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_STORES (
  STORE_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_STORES_seq'),
  STORE_SRC_ID INTEGER,
  STORE_NAME VARCHAR(255),
  ADDRESS_NAME VARCHAR(255),
  PHONE VARCHAR(255),
  EMAIL VARCHAR(255),
  SOURCE_SYSTEM VARCHAR(255) NOT NULL,
  SOURCE_ENTITY VARCHAR(255) NOT NULL,
  INSERT_DT DATE,
  UPDATE_DT DATE
);
CREATE INDEX idx_dim_stores_src_id ON bl_dm.DIM_STORES (STORE_SRC_ID);

CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_BOOKS_seq;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_BOOKS (
  BOOK_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_BOOKS_seq'),
  BOOK_SRC_ID INTEGER,
  BOOK_NAME VARCHAR(255),
  GENRE_NAME VARCHAR(255),
  AUTHOR_FIRST_NAME VARCHAR(255),
  AUTHOR_LAST_NAME VARCHAR(255),
  FORMAT_NAME VARCHAR(255),
  BOOKS_PRICE NUMERIC(10,2),
  SOURCE_SYSTEM VARCHAR(255) NOT NULL,
  SOURCE_ENTITY VARCHAR(255) NOT NULL,
  INSERT_DT DATE,
  UPDATE_DT DATE
);
CREATE INDEX idx_dim_books_src_id ON bl_dm.DIM_BOOKS (BOOK_SRC_ID);

CREATE SEQUENCE IF NOT EXISTS bl_dm.DIM_ADDRESSES_SCD2_seq;
CREATE TABLE IF NOT EXISTS BL_DM.DIM_ADDRESSES_SCD2 (
  ADDRESS_SURR_ID BIGINT PRIMARY KEY DEFAULT nextval('bl_dm.DIM_ADDRESSES_SCD2_seq'),
  ADDRESS_SRC_ID INTEGER,
  ADDRESS_NAME VARCHAR(255),
  STREET_NAME VARCHAR(255),
  CITY_NAME VARCHAR(255),
  COUNTRY_NAME VARCHAR(255),
  COUNTRY_CODE VARCHAR(255),
  SOURCE_SYSTEM VARCHAR(255) NOT NULL,
  SOURCE_ENTITY VARCHAR(255) NOT NULL,
  START_DT DATE,
  END_DT DATE,
  IS_ACTIVE BOOLEAN,
  INSERT_DT DATE,
  UPDATE_DT DATE
);
CREATE INDEX idx_dim_addresses_scd2_src_id ON bl_dm.DIM_ADDRESSES_SCD2 (ADDRESS_SRC_ID);

  CREATE TABLE IF NOT EXISTS BL_DM.FCT_SALES (
  TIME_ID DATE,
  STORE_NAME text,
  ADDRESS_NAME text,
  BOOK_NAME text,
  GENRE_NAME text,
  AUTHOR_FIRST_NAME VARCHAR(255),
  AUTHOR_LAST_NAME VARCHAR(255),
  FORMAT_NAME text,
  BOOKS_PRICE NUMERIC(10, 2),
  AMOUNT INTEGER,
  TOTAL_SALES_AMOUNT DECIMAL(10, 2),
  COUNTRY_NAME text,
  CUSTOMER_FIRST_NAME VARCHAR(255),
  CUSTOMER_LAST_NAME VARCHAR(255), 
  PAYMENT_METHOD_NAME text,
  ONLINE_ADD_CHANNEL_NAME text,
  SHIPPING_METHOD_NAME text,
  WEB_NAME text
);
CREATE INDEX idx_fct_sales_time_id ON bl_dm.FCT_SALES (TIME_ID);

  	end_time := CURRENT_TIMESTAMP;
    run_time := end_time - start_time;

BEGIN 
CALL bl_cl.log_event(user_name, message, schema_name, table_name, start_time, end_time, run_time);

EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error occurred during loading: %', SQLERRM;
        -- Log the event before re-raising the exception
        CALL bl_cl.log_event(user_name, SQLERRM, schema_name, table_name, start_time, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP - start_time);
        RAISE;
END;
END;
$$;
